package com.yanbing.stream;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

/**
 * @since 2020-06-13
 */
@RestController
@RequestMapping("/holo")
public class ThreadController {
    private final ExecutorService executorService = Executors.newFixedThreadPool(3);
    @Resource
    @Autowired
    private HttpServletRequest request;
    @GetMapping
    public ResponseEntity say(@RequestParam String name) {
        ServletRequestAttributes servletRequestAttributes =
            (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        RequestContextHolder.setRequestAttributes(servletRequestAttributes, Boolean.TRUE);
        final AtomicBoolean aBoolean = new AtomicBoolean(true);
        final AtomicReference<String> reference = new AtomicReference<>();
        while (aBoolean.get()) {
            executorService.submit(() -> {
                final String parameter = request.getParameter("name");
                if (!parameter.equals(name)) {
                    reference.set(parameter);
                    aBoolean.set(false);
                }
            });
        }
        return ResponseEntity.ok(reference.get());
    }
}
